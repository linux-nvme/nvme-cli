'\" t
.\"     Title: nvme-get-log
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 08/12/2015
.\"    Manual: NVMe Manual
.\"    Source: NVMe
.\"  Language: English
.\"
.TH "NVME\-GET\-LOG" "1" "08/12/2015" "NVMe" "NVMe Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
nvme-get-log \- Retrieves desired number of bytes from a given NVMe device log
.SH "SYNOPSIS"
.sp
.nf
\fInvme get\-log\fR <device> [ \-\-log\-id=<log\-id> | \-i <log\-id> ]
                        [ \-\-log\-len=<log\-len> | \-l <log\-len> ]
                        [ \-\-namespace\-id=<nsid> | \-n <nsid> ]
                        [ \-\-raw\-binary | \-b ]
.fi
.SH "DESCRIPTION"
.sp
Retrieves an arbitrary NVMe log page from an NVMe device and provides the returned structure\&.
.sp
The \fI<device>\fR parameter is mandatory and may be either the NVMe character device (ex: \fI/dev/nvme0\fR), or a namespace block device (ex: \fI/dev/nvme0n1\fR)\&.
.sp
On success, the returned log structure may be returned in one of several ways depending on the option flags; the structure may be displayed in hex by the program or the raw buffer may be printed to stdout for another program to parse\&.
.SH "OPTIONS"
.PP
\-l <log\-len>, \-\-log\-len=<log\-len>
.RS 4
Allocates a buffer of <log\-len> bytes size and requests this many bytes be returned in the constructed NVMe command\&. This param is mandatory\&.
.RE
.PP
\-i <log\-id>, \-\-log\-id=<log\-id>
.RS 4
Sets the commands requested log\-id to <log\-id>\&. Defaults to 0\&.
.RE
.PP
\-n <nsid>, \-\-namespace\-id=<nsid>
.RS 4
Sets the command\(cqs nsid value to the given nsid\&. Defaults to 0xffffffff if not given\&. This option may not affect anything depending on the log page, which may or may not be specific to a namespace\&.
.RE
.PP
\-b, \-\-raw\-binary
.RS 4
Print the raw log buffer to stdout\&.
.RE
.SH "EXAMPLES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Get 512 bytes from log page 2
.sp
.if n \{\
.RS 4
.\}
.nf
# nvme get\-log /dev/nvme0 \-\-log\-id=2 \-\-log\-len=512
.fi
.if n \{\
.RE
.\}
.sp
The above example will get log page 2 (SMART), and request 512 bytes\&. On success, the returned log will be dumped in hex and not interpreted by the program\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Have the program return the raw log page in binary:
.sp
.if n \{\
.RS 4
.\}
.nf
# nvme get\-log /dev/nvme0 \-log\-id=2 \-\-log\-len=512 \-\-raw\-binary > log_page_2\&.raw
# nvme get\-log /dev/nvme0 \-i 2 \-l 512 \-b > log_page_2\&.raw
.fi
.if n \{\
.RE
.\}
.sp
It is not a good idea to not redirect stdout when using this mode\&.
.RE
.SH "NVME"
.sp
Part of the nvme\-user suite
