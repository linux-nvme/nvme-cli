nvme-nvm-id-ns-lba-format(1)
============================

NAME
----
nvme-nvm-id-ns-lba-format - Send NVMe Identify NVM Command Set specific
Namespace data structure for specified LBA format, display structure

SYNOPSIS
--------
[verse]
'nvme nvm-id-ns-lba-format' <device> [--uuid-index=<uuid-index> | -U <uuid_index>]
			[--lba-format-index=<lba_format_index> | -i <lba_format_index>]
			[--output-format=<fmt> | -o <fmt>] [--verbose | -v]

DESCRIPTION
-----------
Identify NVM Command Set specific Namespace data structure for the specified
LBA format index for the NVM Command Set specified in the CSI field.

The <device> parameter is mandatory and may be either the NVMe character
device (ex: /dev/nvme0), or a namespace block device (ex: /dev/nvme0n1).

On success, the structure may be returned in one of several ways depending
on the option flags; the structure may be parsed by the program or the
raw buffer may be printed to stdout.

OPTIONS
-------
-U <uuid-index>::
--uuid-index=<uuid-index>::
	UUID Index of the feature

-i <lba_format_index>::
--lba-format-index=<lba_format_index>::
	This field specifies the index into the LBA Format list identifying
	the LBA Format capabilities that are to be returned

-o <fmt>::
--output-format=<fmt>::
	Set the reporting format to 'normal', 'json' or 'binary'. Only one
	output format can be used at a time.

-v::
--verbose::
	Increase the information detail in the output.

EXAMPLES
--------
* Has the program interpret the returned buffer and display the known
fields in a human readable format:
+
------------
# nvme nvm-id-ns-lba-format /dev/nvme0n1 -i 0
------------
+
* Have the program return the raw structure in binary:
+
------------
# nvme nvm-id-ns-lba-format /dev/nvme0 -i 0 -o binary > nvm_id_ns.raw
# nvme nvm-id-ns-lba-format /dev/nvme0n1 -i 0 --output-format=binary > nvm_id_ns.raw
------------

NVME
----
Part of the nvme-user suite
