'\" t
.\"     Title: nvme-id-nvmset
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 04/24/2020
.\"    Manual: NVMe Manual
.\"    Source: NVMe
.\"  Language: English
.\"
.TH "NVME\-ID\-NVMSET" "1" "04/24/2020" "NVMe" "NVMe Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
nvme-id-nvmset \- Send NVMe Identify NVM Set List, return result and structure
.SH "SYNOPSIS"
.sp
.nf
\fInvme id\-nvmset\fR <device> [\-i <id> | \-\-nvmset_id=<id> ]
                        [\-o <fmt> | \-\-output\-format=<fmt>]
.fi
.SH "DESCRIPTION"
.sp
For the NVMe device given, sends an identify NVM set list command and provides the result and returned structure\&.
.sp
The <device> parameter is mandatory and may be either the NVMe character device (ex: /dev/nvme0), or a namespace block device (ex: /dev/nvme0n1)\&.
.sp
On success, the structure may be returned in one of several ways depending on the option flags; the structure may be parsed by the program or the raw buffer may be printed to stdout\&.
.SH "OPTIONS"
.PP
\-i <id>, \-\-nvmset_id=<id>
.RS 4
This field specifies the identifier of the NVM Set\&. If given, NVM set identifier whose entry is to be in result data will be greater than or equal to this value\&.
.RE
.PP
\-o <format>, \-\-output\-format=<format>
.RS 4
Set the reporting format to
\fInormal\fR,
\fIjson\fR, or
\fIbinary\fR\&. Only one output format can be used at a time\&.
.RE
.SH "EXAMPLES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Has the program interpret the returned buffer and display the known fields in a human readable format:
.sp
.if n \{\
.RS 4
.\}
.nf
# nvme id\-nvmset /dev/nvme0
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Have the program return the raw structure in binary:
.sp
.if n \{\
.RS 4
.\}
.nf
# nvme id\-nvmset /dev/nvme0 \-\-output\-format=binary > id_nvmset\&.raw
# nvme id\-nvmset /dev/nvme0 \-o binary > id_nvmset\&.raw
.fi
.if n \{\
.RE
.\}
.sp
It is probably a bad idea to not redirect stdout when using this mode\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Alternatively you may want to send the data to another program that can parse the raw buffer\&.
.sp
.if n \{\
.RS 4
.\}
.nf
# nvme id\-nvmset /dev/nvme0 \-o binary | nvme_parse_id_nvmset
.fi
.if n \{\
.RE
.\}
.sp
The parse program in the above example can be a program that shows the structure in a way you like\&. The following program is such an example that will parse it and can accept the output through a pipe,
\*(Aq|\*(Aq, as shown in the above example, or you can
\*(Aqcat\*(Aq
a saved output buffer to it\&.
.RE
.sp
.if n \{\
.RS 4
.\}
.nf
NVME
.fi
.if n \{\
.RE
.\}
.sp
Part of the nvme\-user suite
