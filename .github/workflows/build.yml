---
name: build

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

  workflow_dispatch:

jobs:
  gcc-debug:
    name: gcc debug
    runs-on: ubuntu-latest
    steps:
      - name: install dependencies
        run: sudo apt-get install gcc pkg-config libjson-c-dev libhugetlbfs-dev
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - uses: bsfishy/meson-build@v1.0.3
        name: build
        with:
          action: build
          setup-options: >
            --werror
            --buildtype=debug
            --force-fallback-for=libnvme
            -Dlibnvme:werror=false
          meson-version: 0.61.2
      - uses: bsfishy/meson-build@v1.0.3
        name: test
        with:
          action: test
          meson-version: 0.61.2
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: log files
          path: |
            build/meson-logs/*.txt

  gcc-release:
    name: gcc release
    runs-on: ubuntu-latest
    steps:
      - name: install dependencies
        run: sudo apt-get install gcc pkg-config libjson-c-dev libhugetlbfs-dev
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - uses: bsfishy/meson-build@v1.0.3
        name: build
        with:
          action: build
          setup-options: >
            --werror
            --buildtype=release
            --force-fallback-for=libnvme
            -Dlibnvme:werror=false
          meson-version: 0.61.2
      - uses: bsfishy/meson-build@v1.0.3
        name: test
        with:
          action: test
          meson-version: 0.61.2
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: log files
          path: |
            build/meson-logs/*.txt

  clang-release:
    name: clang release
    runs-on: ubuntu-latest
    steps:
      - name: install dependencies
        run: sudo apt-get install clang pkg-config libjson-c-dev libhugetlbfs-dev
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - uses: bsfishy/meson-build@v1.0.3
        name: build
        with:
          action: build
          setup-options: >
            --werror
            --buildtype=release
            --cross-file=.github/cross/clang.txt
            --force-fallback-for=libnvme
            -Dlibnvme:werror=false
            -Dopenssl:werror=false
          meson-version: 0.61.2
      - uses: bsfishy/meson-build@v1.0.3
        name: test
        with:
          action: test
          meson-version: 0.61.2
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: log files
          path: |
            build/meson-logs/*.txt

  fallback-shared-libraries:
    name: fallback shared libraries
    runs-on: ubuntu-latest
    steps:
      - name: install dependencies
        run: sudo apt-get install libpam-dev libcap-ng-dev
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - uses: BSFishy/meson-build@v1.0.3
        name: build
        with:
          action: build
          setup-options: >
            --werror
            --buildtype=release
            --wrap-mode=forcefallback
            --default-library=shared
            -Dlibnvme:werror=false
            -Dopenssl:werror=false
          meson-version: 0.61.2
      - uses: bsfishy/meson-build@v1.0.3
        name: test
        with:
          action: test
          meson-version: 0.61.2
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: log files
          path: |
            build/meson-logs/*.txt

  fallback-static-libraries:
    name: fallback static libraries
    runs-on: ubuntu-latest
    steps:
      - name: install dependencies
        run: sudo apt-get install gcc meson ninja-build libpam-dev libcap-ng-dev
      - uses: actions/checkout@v3
      - name: build
        run: |
          LDFLAGS=-static meson setup   \
            --werror                    \
            --buildtype=release         \
            --wrap-mode=forcefallback   \
            --default-library=static    \
            -Dlibnvme:openssl=disabled  \
            -Dlibnvme:python=disabled   \
            -Dlibnvme:werror=false      \
            .build
          meson compile -C .build
      - name: test
        run: |
          meson test -C .build
          ldd .build/nvme 2>&1 | grep 'not a dynamic executable'
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: log files
          path: |
            build/meson-logs/*.txt

  cross-armhf:
    name: cross armhf
    runs-on: ubuntu-latest
    steps:
      - name: set up arm architecture
        run: |
          export release=$(lsb_release -c -s)
          sudo dpkg --add-architecture armhf
          sudo sed -i -e 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list
          sudo dd of=/etc/apt/sources.list.d/armhf.list <<EOF
          deb [arch=armhf] http://ports.ubuntu.com/ $release main universe restricted"
          deb [arch=armhf] http://ports.ubuntu.com/ $release-updates main universe restricted"
          EOF
          sudo apt update
      - name: install armhf compiler
        run: sudo apt install gcc-arm-linux-gnueabihf pkg-config qemu-user-static
      - name: install libraries
        run: sudo apt install libjson-c-dev:armhf
      - uses: actions/checkout@v3
      - uses: BSFishy/meson-build@v1.0.3
        name: build
        with:
          action: build
          setup-options: >
            --werror
            --buildtype=release
            --cross-file=.github/cross/ubuntu-armhf.txt
            --force-fallback-for=libnvme
            -Dlibnvme:python=disabled
            -Dopenssl:werror=false
          meson-version: 0.61.2
      - uses: bsfishy/meson-build@v1.0.3
        name: test
        with:
          action: test
          meson-version: 0.61.2
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: log files
          path: |
            build/meson-logs/*.txt

  cross-ppc64le:
    name: cross ppc64le
    runs-on: ubuntu-latest
    steps:
      - name: set up ppc64le architecture
        run: |
          export release=$(lsb_release -c -s)
          sudo dpkg --add-architecture ppc64el
          sudo sed -i -e 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list
          sudo dd of=/etc/apt/sources.list.d/ppc64el.list <<EOF
          deb [arch=ppc64el] http://ports.ubuntu.com/ $release main universe restricted"
          deb [arch=ppc64el] http://ports.ubuntu.com/ $release-updates main universe restricted"
          EOF
          sudo apt update
      - name: install powerpc64le compiler
        run: sudo apt install gcc-powerpc64le-linux-gnu pkg-config qemu-user-static
      - name: install libraries
        run: sudo apt install libjson-c-dev:ppc64el
      - uses: actions/checkout@v3
      - uses: BSFishy/meson-build@v1.0.3
        name: build
        with:
          action: build
          setup-options: >
            --werror
            --buildtype=release
            --cross-file=.github/cross/ubuntu-ppc64le.txt
            --force-fallback-for=libnvme
            -Dlibnvme:werror=false
            -Dlibnvme:python=disabled
            -Dopenssl:werror=false
          meson-version: 0.61.2
      - uses: bsfishy/meson-build@v1.0.3
        name: test
        with:
          action: test
          meson-version: 0.61.2
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: log files
          path: |
            build/meson-logs/*.txt

  cross-s390x:
    name: cross s390x
    runs-on: ubuntu-latest
    steps:
      - name: set up s390x architecture
        run: |
          export release=$(lsb_release -c -s)
          sudo dpkg --add-architecture s390x
          sudo sed -i -e 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list
          sudo dd of=/etc/apt/sources.list.d/s390x.list <<EOF
          deb [arch=s390x] http://ports.ubuntu.com/ $release main universe restricted"
          deb [arch=s390x] http://ports.ubuntu.com/ $release-updates main universe restricted"
          EOF
          sudo apt update
      - name: install s390x compiler
        run: sudo apt install gcc-s390x-linux-gnu libgcc-s1:s390x pkg-config qemu-user-static
      - name: install libraries
        run: sudo apt install libjson-c-dev:s390x
      - uses: actions/checkout@v3
      - uses: BSFishy/meson-build@v1.0.3
        name: build
        with:
          action: build
          setup-options: >
            --werror
            --buildtype=release
            --cross-file=.github/cross/ubuntu-s390x.txt
            --force-fallback-for=libnvme
            -Dlibnvme:werror=false
            -Dlibnvme:python=disabled
            -Dopenssl:werror=false
          meson-version: 0.61.2
      - uses: bsfishy/meson-build@v1.0.3
        name: test
        with:
          action: test
          meson-version: 0.61.2
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: log files
          path: |
            build/meson-logs/*.txt

  build-muon:
    name: muon
    runs-on: ubuntu-latest
    steps:
      - name: install dependencies
        run: sudo apt install gcc make pkg-config libcurl4-openssl-dev libarchive-dev libpkgconf-dev
      - uses: actions/checkout@v3
      - name: build samurai
        run: |
          cd ..

          export CC=gcc
          export ROOT_PATH=$(pwd)/root

          git clone --depth 1 https://github.com/michaelforney/samurai.git

          cd samurai
          make
          make PREFIX=${ROOT_PATH} install
      - name: build muon
        run: |
          cd ..

          export CC=gcc
          export ROOT_PATH=$(pwd)/root
          export PATH=${ROOT_PATH}/bin:${PATH}


          git clone https://git.sr.ht/~lattis/muon
          git -C muon reset --hard 0.2.0

          cd muon
          ./bootstrap.sh stage1
          stage1/muon setup              \
              -Dprefix=${ROOT_PATH}      \
              -Ddocs=disabled            \
              -Dsamurai=disabled         \
              .build
          samu -C .build
          .build/muon -C .build install
      - name: build
        run: |
          export ROOT_PATH=$(pwd)/../root
          export PATH=${ROOT_PATH}/bin:${PATH}

          muon setup                    \
             -Dprefix=${ROOT_PATH}      \
             -Dwrap_mode=forcefallback  \
             -Dlibnvme:python=disabled  \
             -Dlibnvme:openssl=disabled \
             .build
          samu -C .build
          muon -C .build install
      - name: test
        run: |
          export ROOT_PATH=$(pwd)/../root
          export PATH=${ROOT_PATH}/bin:${PATH}

          muon -C .build test
